/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package major_project;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.junit.jupiter.api.Test;

import major_project.model.Currency;
import major_project.model.DatabaseHandler;
import major_project.model.JsonConverter;
import major_project.model.Model;
import major_project.model.httpHandler.CryptoHttpHandler;
import major_project.model.httpHandler.SendgridHttpHandler;



class ModelTest {
    @Test 
    public void getElementTest() {
            DatabaseHandler dbHandler = mock(DatabaseHandler.class);
            Model model = new Model(false, false, dbHandler);
            assertEquals(0, model.getElements().size());
            Currency cur = mock(Currency.class);
            model.addElement(cur);
            assertEquals(cur, model.getElements().get(0));
            assertNotEquals(0, model.getElements().size());
            model.removeElement(cur);
            assertEquals(0, model.getElements().size());
            Currency cur2 = mock(Currency.class);
            model.addElement(cur);
            model.addElement(cur2);
            assertEquals(2, model.getElements().size());
            model.clear();
            assertEquals(0, model.getElements().size());
    }

    @Test
    public void listTest() {

        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Model model = new Model(false, false, dbHandler);
        model.setAPIKey("123");
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        List<Currency> expected = new ArrayList<>();
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
            mock.when(() -> JsonConverter.listing(eq("this")))
                .thenReturn(expected);
        
            try {
                when(cryptohandler.getListing(anyString()))
                    .thenReturn("this");
            } catch (Exception e2) {
                assertTrue(false);
            }
    
            model.injectCryptoHandler(cryptohandler);
            
            try {
                List<Currency> actual = model.getListing();
                List<Currency> actual2 = model.getListing();
                assertEquals(expected, actual);
                assertEquals(expected, actual2);
                verify(cryptohandler, times(2)).getListing(eq("123"));

            } catch (Exception e) {
                assertTrue(false);
            }
            
            
            
        }
    }

    @Test
    public void convertTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);
        Currency cur2 = mock(Currency.class);

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        SendgridHttpHandler sendHandler = mock(SendgridHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
            mock.when(() -> JsonConverter.convert(eq("this string"), eq(2)))
                    .thenReturn(3.0);
        
            when(cur.getId()).thenReturn(2);
            when(cur2.getId()).thenReturn(3);
            try {
                when(cryptohandler.getConversion(anyString(), anyInt(), anyInt(), anyDouble()))
                    .thenReturn("this string");
            } catch (Exception e2) {
                assertTrue(false);
                e2.printStackTrace();
            }
    
            model.injectCryptoHandler(cryptohandler);
            model.injectSendgridHandler(sendHandler);
            
            try {
                model.convert(cur, cur2, 10.5, "a");
            } catch (Exception e1) {
                
                assertTrue(false);
            }
            try {
                verify(cryptohandler).getConversion(any(), eq(2), eq(3), eq(10.5));
            } catch (Exception e) {
                assertTrue(false);
            }
            try {
                verify(sendHandler).postEmail(any(), anyString());
            } catch (Exception e) {
                assertTrue(false);
            }
        }
    }

    @Test
    public void nullConvertTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = null;
        Currency cur2 = mock(Currency.class);

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        SendgridHttpHandler sendHandler = mock(SendgridHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
    
            model.injectCryptoHandler(cryptohandler);
            model.injectSendgridHandler(sendHandler);
            
            assertThrows(Exception.class, () -> model.convert(cur, cur2, 10.5, "a"));
            
        }
    }

    @Test
    public void nullConvertTest2() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);
        Currency cur2 = null;

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        SendgridHttpHandler sendHandler = mock(SendgridHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
            
            model.injectCryptoHandler(cryptohandler);
            model.injectSendgridHandler(sendHandler);
            
            assertThrows(Exception.class, () -> model.convert(cur, cur2, 10.5, "a"));
            
        }
    }

    @Test
    public void nullConvertTest3() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);
        Currency cur2 = mock(Currency.class);

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        SendgridHttpHandler sendHandler = mock(SendgridHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
    
            model.injectCryptoHandler(cryptohandler);
            model.injectSendgridHandler(sendHandler);
            
            assertThrows(Exception.class, () -> model.convert(cur, cur2, 10.5, null));
            
        }
    }

    @Test
    public void nullConvertTest4() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);
        Currency cur2 = mock(Currency.class);

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        SendgridHttpHandler sendHandler = mock(SendgridHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
    
            model.injectCryptoHandler(cryptohandler);
            model.injectSendgridHandler(sendHandler);
            
            assertThrows(Exception.class, () -> model.convert(cur, cur2, -1, "a"));
            
        }
    }

    @Test
    public void nullMetaDataTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = null;

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
    
            model.injectCryptoHandler(cryptohandler);
            
            assertThrows(Exception.class, () -> model.getMetadata(cur));
            
        }
    }

    @Test
    public void inputOfflineMetaDataTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
    
            model.injectCryptoHandler(cryptohandler);
            
            try {
                model.getMetadata(cur);
                verify(dbHandler, Mockito.never()).isCached(eq(cur));
                verify(dbHandler, Mockito.never()).uncache(eq(cur));
                verify(dbHandler, Mockito.never()).cache(eq(cur));
            } catch (Exception e) {
                assertTrue(false);
            }
            
        }
    }

    @Test
    public void notCachedMetaDataTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);

        when(dbHandler.isCached(any())).thenReturn(false);
        

        Model model = new Model(true, false, dbHandler);
        
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        try {
            when(cryptohandler.getMetaData(anyString(), anyInt())).thenReturn("value");
        } catch (Exception e1) {
            assertTrue(false);
        }
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
            mock.when(() -> JsonConverter.metadata(anyString(), any()))
                    .thenReturn(cur);
            model.injectCryptoHandler(cryptohandler);
            
            try {
                model.getMetadata(cur);
            } catch (Exception e) {
                assertTrue(false);
            }
                verify(dbHandler).isCached(eq(cur));
                verify(dbHandler, Mockito.never()).uncache(eq(cur));
                verify(dbHandler).cache(eq(cur));
        }
    }

    @Test
    public void isCachedMetaDataTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);

        when(dbHandler.isCached(any())).thenReturn(true);
        

        Model model = new Model(true, false, dbHandler);
        
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);
        try {
            when(cryptohandler.getMetaData(anyString(), anyInt())).thenReturn("value");
        } catch (Exception e1) {
            assertTrue(false);
        }
        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
            mock.when(() -> JsonConverter.metadata(anyString(), any()))
                    .thenReturn(cur);
            model.injectCryptoHandler(cryptohandler);
            
            try {
                model.getMetadata(cur);
            } catch (Exception e) {
                assertTrue(false);
            }
                verify(dbHandler).isCached(eq(cur));
                verify(dbHandler).uncache(eq(cur));
                verify(dbHandler).cache(eq(cur));
        }
    }

    @Test
    public void SpecialDealTest() {
        DatabaseHandler dbHandler = mock(DatabaseHandler.class);
        Currency cur = mock(Currency.class);
        Currency cur2 = mock(Currency.class);

        Model model = new Model(false, false, dbHandler);
        CryptoHttpHandler cryptohandler = mock(CryptoHttpHandler.class);

        try (MockedStatic<JsonConverter> mock = mockStatic(JsonConverter.class)) {
            mock.when(() -> JsonConverter.convert(eq(null), anyInt()))
                    .thenReturn(10.0);
        
    
            model.injectCryptoHandler(cryptohandler);
            
            String actual = null;
            try {
                actual = model.convert(cur, cur2, 10.0, "a");
            } catch (Exception e1) {
                
                assertTrue(false);
            }
            //expect conversion of 10, conversion rate 1. (deal not applied)
            String expected = "Converting null to null. null null has Website: null, Date Launched: null.  null null has Website: null, Date Launched: null.  10.000000 null becomes 10.000000 null. Conversion Rate of 1.000000";
            assertEquals(expected, actual);

            
            model.setSpecialDealCurrency(cur);

            try {
                actual = model.convert(cur, cur2, 10.0, "a");
            } catch (Exception e1) {
                assertTrue(false);
            }
            //expect same output
            assertEquals(expected, actual);

            try {
                //swapping to and from
                actual = model.convert(cur2, cur, 10.0, "a");
            } catch (Exception e1) {
                assertTrue(false);
            }

            //expect conversion of 11, conversion rate 1.1 (deal applied)
            expected = "Converting null to null. null null has Website: null, Date Launched: null.  null null has Website: null, Date Launched: null.  10.000000 null becomes 11.000000 null. Conversion Rate of 1.100000";
            assertEquals(expected, actual);

            model.setSpecialDealCurrency(cur2);

            try {
                actual = model.convert(cur, cur2, 10.0, "a");
            } catch (Exception e1) {
                
                assertTrue(false);
            }
            //expect deal applied
            assertEquals(expected, actual);

            try {
                actual = model.convert(cur2, cur, 10.0, "a");
            } catch (Exception e1) {
                
                assertTrue(false);
            }
            //expect deal not applied
            expected = "Converting null to null. null null has Website: null, Date Launched: null.  null null has Website: null, Date Launched: null.  10.000000 null becomes 10.000000 null. Conversion Rate of 1.000000";
            assertEquals(expected, actual);
        }
    }
    
}
