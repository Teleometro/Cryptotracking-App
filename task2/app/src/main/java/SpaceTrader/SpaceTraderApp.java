/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package SpaceTrader;

import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.input.Clipboard;
import javafx.scene.input.ClipboardContent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Paint;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

import SpaceTrader.Dummy.AccountInfo;
import SpaceTrader.Dummy.DummyHandler;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import java.util.List;

import javax.swing.event.SwingPropertyChangeSupport;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;


public class SpaceTraderApp extends Application{
    String statusString = null;
    long lastRefreshed = System.currentTimeMillis();
    Boolean signInOpen = false;
    Boolean createAccOpen = false;
    VBox userInfo = new VBox();
    GridPane shipInfo = new GridPane();
    String authTok = null;
    HttpHandler server = new HttpHandlerImpl();
    
    static Gson gson = new Gson();
    static JsonParser parser = new JsonParser();

    @Override
    public void start(Stage stage) {
        userInfo.setVisible(false);
        userInfo.setSpacing(10);

        if (statusString == null) {
            statusString = server.getStatus();
        }

        JsonParser parser = new JsonParser();
        List<String> args = getParameters().getRaw();
        VBox vp = new VBox();


        if (args.size() > 0)
        {
            if(args.get(0).toLowerCase().equals("online")) {
            }
            else if (args.get(0).toLowerCase().equals("offline")) {
                System.out.println("dummy enabled");
                server = new DummyHandler();
                Button h = new Button("help");
                h.setOnAction(e -> {
                    helpPopup();
                    h.setVisible(false);
                });
                vp.getChildren().add(h);
            }
            else System.out.println("did not recognize argument");
        }

        //server.postRequest("https://api.spacetraders.io/users/greenGizzardKing/claim", "");

        Button signToggle = new Button("Sign in/Sign Out");
        signToggle.setOnAction(new EventHandler<ActionEvent>() {  
            @Override  
            public void handle(ActionEvent arg0) { 
                authTok = null; 
                userInfo.setVisible(false);
                if (signInOpen == false) {
                signInPopup();
                signInOpen = true;
                }
            }  
        });  
        Button createAcc = new Button("Create Account");
        createAcc.setOnAction(new EventHandler<ActionEvent>() {  
            @Override  
            public void handle(ActionEvent arg0) {  
                if (createAccOpen == false) {
                    createAccPopup();
                    createAccOpen = true;
                }
            }  
        });  
        

        Label l = new Label(statusString);
        vp.getChildren().addAll(signToggle, createAcc);
        VBox bp = new VBox(vp, userInfo, l);
        bp.setPadding(new Insets(10, 10, 30, 10));
        bp.setSpacing(10);
        Scene scene = new Scene(bp, 720, 600);
        stage.setScene(scene);
        stage.show();
        
    }
    
    public static void main(String[] args) {
        launch(args);
    }

    void sellPopup() {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Select a ship to sell from"));
        vb.setSpacing(10);
        ComboBox<String> gb = new ComboBox<>();
        gb.setVisible(false);
        ComboBox<String> cb = new ComboBox<>();
        Label al = new Label("Select good and amount to Sell");
        al.setVisible(false);
        TextField am = new TextField("0");
        am.setVisible(false);

        JsonArray ships = parser.parse(server.getMyShips(authTok)).getAsJsonObject().get("ships").getAsJsonArray();
        for (JsonElement el : ships) {
                cb.getItems().add(el.getAsJsonObject().get("id").getAsString());
        }


        Button conf = new Button("confirm");
        Button conf2 = new Button("confirm");
        conf2.setVisible(false);
        conf.setOnAction(event -> {
            for (JsonElement el : ships) {
                if (el.getAsJsonObject().get("id").getAsString().equals(cb.getValue())) {
                    JsonArray arr =  el.getAsJsonObject().get("cargo").getAsJsonArray();
                    for (JsonElement n : arr) {
                        gb.getItems().add(n.getAsJsonObject().get("good").getAsString());
                    }
                }
            }
            gb.setVisible(true);
            al.setVisible(true);
            am.setVisible(true);
            conf2.setVisible(true);
        });
        conf2.setOnAction(event -> {
            try{
                int num = Integer.parseInt(am.getText());
                String s = server.sellCargo(authTok, cb.getValue(), gb.getValue(), num);
                refreshUserInfo();
                if (parser.parse(s).getAsJsonObject().has("error")) {
                    Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                    l.setTextFill(Paint.valueOf("#FF2222"));
                    vb.getChildren().add(l);
                }
                else pop.hide();
            } catch (NumberFormatException e) {
                Label l = new Label("number of goods sold must be integer value!");
                l.setTextFill(Paint.valueOf("FF2222"));
                vb.getChildren().add(l);
            }            
        });


        vb.getChildren().addAll(cb, conf, al, gb, am, conf2);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }

    void buyPopup() {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Select a ship to send goods"));
        vb.setSpacing(10);
        ComboBox<String> gb = new ComboBox<>();
        gb.setVisible(false);
        ComboBox<String> cb = new ComboBox<>();
        Label al = new Label("Select good and amount to buy");
        al.setVisible(false);
        TextField am = new TextField("0");
        am.setVisible(false);

        JsonArray ships = parser.parse(server.getMyShips(authTok)).getAsJsonObject().get("ships").getAsJsonArray();
        for (JsonElement el : ships) {
                cb.getItems().add(el.getAsJsonObject().get("id").getAsString());
        }


        Button conf = new Button("confirm");
        Button conf2 = new Button("confirm");
        conf2.setVisible(false);
        conf.setOnAction(event -> {
            for (JsonElement el : ships) {
                if (el.getAsJsonObject().get("id").getAsString().equals(cb.getValue())) {
                    JsonArray market = parser.parse(server.getMarket(authTok, el.getAsJsonObject().get("location").getAsString())).getAsJsonObject().get("marketplace").getAsJsonArray();
                    for (JsonElement n : market) {
                        gb.getItems().add(n.getAsJsonObject().get("symbol").getAsString());
                    }
                }
            }
            gb.setVisible(true);
            al.setVisible(true);
            am.setVisible(true);
            conf2.setVisible(true);
        });
        
        conf2.setOnAction(event -> {
            try{
                int num = Integer.parseInt(am.getText());
                String s = server.purchaseCargo(authTok, cb.getValue(), gb.getValue(), num);
                refreshUserInfo();
                if (parser.parse(s).getAsJsonObject().has("error")) {
                    Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                    l.setTextFill(Paint.valueOf("#FF2222"));
                    vb.getChildren().add(l);
                }
                else pop.hide();
            } catch (NumberFormatException e) {
                Label l = new Label("number of goods sold must be integer value!");
                l.setTextFill(Paint.valueOf("FF2222"));
                vb.getChildren().add(l);
            }            
        });


        vb.getChildren().addAll(cb, conf, al, gb, am, conf2);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }

    

    public void signInPopup() {
        Label more = new Label();
        Button but = new Button("Log in");
        TextField auth = new TextField();
        VBox vb = new VBox(new Label("Log in"), more,
                            new HBox(new Label("token"), auth), 
                            but);
        vb.setSpacing(10);
        Stage pop = new Stage();
        but.setOnAction(event -> {
            authTok = server.signIn(auth.getText().trim());
            if (authTok == null) {
                more.setText("invalid token");
                more.setTextFill(Paint.valueOf("#FF2222"));
            }
            else {
                refreshUserInfo();
                userInfo.setVisible(true);
                pop.hide();
            }
        });
        Scene scene = new Scene(vb, 250, 150);
        pop.setScene(scene);
        pop.setOnHiding( event -> { signInOpen = false; } );
        pop.show();
    }

    public void helpPopup() {
        Button but = new Button("ok");
        VBox vb = new VBox(
                            new Label("Create an account in order to log in"), 
                            but);
        vb.setSpacing(10);
        Stage pop = new Stage();
        but.setOnAction(event -> {
            pop.hide();
        });
        Scene scene = new Scene(vb, 250, 150);
        pop.setScene(scene);
        pop.show();
    }
    public void createLoanPopup() {
        
        Stage pop = new Stage();
        JsonArray loans = new JsonParser().parse(server.getLoans(authTok)).getAsJsonObject().get("loans").getAsJsonArray();
        
        
        VBox vb = new VBox(new Label("Available Loans"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int index = 2;
        gb.add(new Label("type"), 0, 0);
        gb.add(new Label("amount"), 1, 0);
        gb.add(new Label("rate"), 2, 0);
        gb.add(new Label("term length"), 3, 0);
        gb.add(new Label("collateral required?"), 4, 0);
        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        gb.add(new Label("----------------"), 2, 1);
        gb.add(new Label("----------------"), 3, 1);
        gb.add(new Label("----------------"), 4, 1);
        for (JsonElement el : loans) {
            
            gb.add(new Label(el.getAsJsonObject().get("type").getAsString()), 0, index);
            gb.add(new Label(el.getAsJsonObject().get("amount").getAsString()), 1, index);
            gb.add(new Label(el.getAsJsonObject().get("rate").getAsString()), 2, index);
            gb.add(new Label(el.getAsJsonObject().get("termInDays").getAsString() + "days"), 3, index);
            gb.add(new Label(el.getAsJsonObject().get("collateralRequired").getAsString()), 4, index);
            Button but = new Button("Take Loan");
            but.setOnAction(e -> {
                String s = server.obtainLoan(authTok, el.getAsJsonObject().get("type").getAsString());
                if (parser.parse(s).getAsJsonObject().has("error"))
                {
                    Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                    l.setTextFill(Paint.valueOf("#FF2222"));
                    vb.getChildren().add(l);
                }
                refreshUserInfo();
            });
            gb.add(but, 5, index);
            index++;
        }
        vb.getChildren().addAll(gb);
        Scene scene = new Scene(vb, 700, 800);
        pop.setScene(scene);
        pop.show();
    }
    public void createShipPopup() {
        
        Stage pop = new Stage();
        JsonArray ships = new JsonParser().parse(server.getShips(authTok)).getAsJsonObject().get("shipListings").getAsJsonArray();
        
        
        VBox vb = new VBox(new Label("Available Ships"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int index = 2;
        gb.add(new Label("class"), 0, 0);
        gb.add(new Label("manufacturer"), 1, 0);
        gb.add(new Label("maximum cargo"), 2, 0);
        gb.add(new Label("plating"), 3, 0);
        gb.add(new Label("speed"), 4, 0);
        gb.add(new Label("type"), 5, 0);
        gb.add(new Label("weapons"), 6, 0);
        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        gb.add(new Label("----------------"), 2, 1);
        gb.add(new Label("----------------"), 3, 1);
        gb.add(new Label("----------------"), 4, 1);
        gb.add(new Label("----------------"), 5, 1);
        gb.add(new Label("----------------"), 6, 1);
        for (JsonElement el : ships) {
            
            gb.add(new Label(el.getAsJsonObject().get("class").getAsString()), 0, index);
            gb.add(new Label(el.getAsJsonObject().get("manufacturer").getAsString()), 1, index);
            gb.add(new Label(el.getAsJsonObject().get("maxCargo").getAsString()), 2, index);
            gb.add(new Label(el.getAsJsonObject().get("plating").getAsString()), 3, index);
            gb.add(new Label(el.getAsJsonObject().get("speed").getAsString()), 4, index);
            gb.add(new Label(el.getAsJsonObject().get("type").getAsString()), 5, index);
            gb.add(new Label(el.getAsJsonObject().get("weapons").getAsString()), 6, index);
            Button but = new Button("View Purchase Locations");
            but.setOnAction(e -> {
                ShipLocPopup(authTok, el.getAsJsonObject());
            });
            gb.add(but, 7, index);
            index++;
        }
        vb.getChildren().addAll(gb);
        Scene scene = new Scene(vb, 800, 800);
        pop.setScene(scene);
        pop.show();
    }
    void activeLoansPopUp() {
        Stage pop = new Stage();
        JsonArray loans = new JsonParser().parse(server.getMyLoans(authTok)).getAsJsonObject().get("loans").getAsJsonArray();
        
        
        VBox vb = new VBox(new Label("Your Loans"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int i = 2;
        gb.add(new Label("id"), 0, 0);
        gb.add(new Label("due"), 1, 0);
        gb.add(new Label("repayment amount"), 2, 0);
        gb.add(new Label("status"), 3, 0);
        gb.add(new Label("type"), 4, 0);
        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        gb.add(new Label("----------------"), 2, 1);
        gb.add(new Label("----------------"), 3, 1);
        gb.add(new Label("----------------"), 4, 1);
        for (JsonElement el : loans) {

            gb.add(new Label(el.getAsJsonObject().get("id").getAsString()), 0, i);
            gb.add(new Label(el.getAsJsonObject().get("due").getAsString()), 1, i);
            gb.add(new Label(el.getAsJsonObject().get("repaymentAmount").getAsString()), 2, i);
            gb.add(new Label(el.getAsJsonObject().get("status").getAsString()), 3, i);
            gb.add(new Label(el.getAsJsonObject().get("type").getAsString()), 4, i);
            i += 1;
        }
        vb.getChildren().add(gb);
        Scene scene = new Scene(vb, 700, 800);
        pop.setScene(scene);
        pop.show();
    }
    void activeShipsPopup() {
        Stage pop = new Stage();
        JsonArray ships = new JsonParser().parse(server.getMyShips(authTok)).getAsJsonObject().get("ships").getAsJsonArray();
        
        VBox vb = new VBox(new Label("Available Ships"));
        vb.setSpacing(10);
        refreshShipInfo(ships);
        vb.getChildren().add(shipInfo);
        Scene scene = new Scene(vb, 1600, Math.min(1000, 100+50*shipInfo.getRowCount()));
        pop.setScene(scene);
        pop.show();
    }
    void viewMarket(String authTok, JsonObject ship) {
        Stage pop = new Stage();        
        String loc = ship.get("location").getAsString();
        VBox vb = new VBox();
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int index = 2;
        gb.add(new Label("good"), 0, 0);
        gb.add(new Label("price/unit"), 1, 0);
        gb.add(new Label("volume/unit"), 2, 0);
        gb.add(new Label("quantity available"), 3, 0);
        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        gb.add(new Label("----------------"), 2, 1);
        JsonArray market = parser.parse(server.getMarket(authTok, loc)).getAsJsonObject().get("marketplace").getAsJsonArray();
        for (JsonElement el : market) {
            
            gb.add(new Label(el.getAsJsonObject().get("symbol").getAsString()), 0, index);
            gb.add(new Label(el.getAsJsonObject().get("pricePerUnit").getAsString()), 1, index);
            gb.add(new Label(el.getAsJsonObject().get("volumePerUnit").getAsString()), 2, index);
            gb.add(new Label(el.getAsJsonObject().get("quantityAvailable").getAsString()), 3, index);
            TextField am = new TextField("0");
            Button purch = new Button("Purchase");
            gb.add(am, 4, index);
            gb.add(purch, 5, index);
            purch.setOnAction(event -> {
                try{
                    int num = Integer.parseInt(am.getText());
                    String s = server.purchaseCargo(authTok, ship.get("id").getAsString(), el.getAsJsonObject().get("symbol").getAsString(), num);
                    refreshUserInfo();
                    if (parser.parse(s).getAsJsonObject().has("error")) {
                        Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                        l.setTextFill(Paint.valueOf("#FF2222"));
                        vb.getChildren().add(l);
                    }
                    else pop.hide();
                } catch (NumberFormatException e) {
                    Label l = new Label("goods bought must be integer value!");
                    l.setTextFill(Paint.valueOf("FF2222"));
                    vb.getChildren().add(l);
                  }
            });
            index++;
        }
        vb.getChildren().addAll(gb);
        Scene scene = new Scene(vb, 800, 400);
        pop.setScene(scene);
        pop.show();
    }
    void ShipCargoPopup(String authTok, JsonObject ship) {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Cargo"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int index = 2;
        gb.add(new Label("good"), 0, 0);
        gb.add(new Label("quantity"), 1, 0);
        gb.add(new Label("total volume"), 2, 0);

        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        gb.add(new Label("----------------"), 2, 1);
        for (JsonElement el : ship.get("cargo").getAsJsonArray()) {
            
            gb.add(new Label(el.getAsJsonObject().get("good").getAsString()), 0, index);
            gb.add(new Label(el.getAsJsonObject().get("quantity").getAsString()), 1, index);
            gb.add(new Label(el.getAsJsonObject().get("totalVolume").getAsString()), 2, index);
            index++;
        }
        vb.getChildren().addAll(gb);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }
    void ShipLocPopup(String authTok, JsonObject ship) {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Purchase Locations"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int index = 2;
        gb.add(new Label("location"), 0, 0);
        gb.add(new Label("price"), 1, 0);
        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        for (JsonElement el : ship.get("purchaseLocations").getAsJsonArray()) {
            
            gb.add(new Label(el.getAsJsonObject().get("location").getAsString()), 0, index);
            gb.add(new Label(el.getAsJsonObject().get("price").getAsString()), 1, index);

            Button but = new Button("Purchase From Location");
            but.setOnAction(e -> {
                String s = server.purchaseShip(authTok, el.getAsJsonObject().get("location").getAsString(), ship.get("type").getAsString());
                refreshUserInfo();
                if (parser.parse(s).getAsJsonObject().has("error")) {
                    Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                    l.setTextFill(Paint.valueOf("FF2222"));
                    vb.getChildren().add(l);
                }
                else pop.hide();
            });
            gb.add(but, 5, index);
            index++;
        }
        vb.getChildren().addAll(gb);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }
    void refreshUserInfo() {
        userInfo.getChildren().clear();
        AccountInfo acc = server.getAccount(authTok);
        Button loans = new Button("view available loans");
        Button ships = new Button("view available ships");
        loans.setOnAction(le -> {createLoanPopup();});
        ships.setOnAction(le -> {createShipPopup();});
        Button myLoans = new Button("view your loans");
        Button myShips = new Button("view your ships and nearby marketplaces");
        myLoans.setOnAction(le -> {activeLoansPopUp();});
        myShips.setOnAction(le -> {activeShipsPopup();});
        Button nearLoc = new Button("view nearby locations");
        nearLoc.setOnAction(le -> {viewNearLocs();});
        Button createFlight = new Button("create a flight plan");
        createFlight.setOnAction(le -> {createFlightPlanPopup();});
        Button viewFlight = new Button("view flight plans");
        viewFlight.setOnAction(le -> {viewFlightPlanPopup();});
        Button sell = new Button("Sell Goods");
        sell.setOnAction(new EventHandler<ActionEvent>() {  
            @Override  
            public void handle(ActionEvent arg0) {  
                sellPopup();
            }  
        });
        Button buy = new Button("Buy Goods");
        buy.setOnAction(new EventHandler<ActionEvent>() {  
            @Override  
            public void handle(ActionEvent arg0) {  
                buyPopup();
            }  
        });    
        userInfo.getChildren().addAll(new Label("username: " + acc.username),
                                        new Label("You have " + acc.credits + " credits"),
                                        new Label("You have " + acc.ShipCount + " ships"),
                                        new Label("You have " + acc.StructureCount + " structures"),
                                        new Label("you joined on " + acc.JoinDate),
                                        loans,
                                        ships,
                                        myLoans,
                                        myShips,
                                        nearLoc,
                                        createFlight,
                                        viewFlight,
                                        buy,
                                        sell
                                        );
    }

    void viewFlightPlanPopup() {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Locations"));
        vb.setSpacing(10);
        VBox gb = new VBox();
        gb.setVisible(false);
        ComboBox<String> cb = new ComboBox<>();

        JsonArray ships = parser.parse(server.getMyShips(authTok)).getAsJsonObject().get("ships").getAsJsonArray();
        for (JsonElement el : ships) {
            if (el.getAsJsonObject().has("flightPlanId")) {
                cb.getItems().add(el.getAsJsonObject().get("flightPlanId").getAsString());
            }
        }


        Button conf = new Button("confirm");
        conf.setOnAction(event -> {
            String s = server.getFlight(authTok, cb.getValue());
            if (parser.parse(s).getAsJsonObject().has("error")) {
                Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                l.setTextFill(Paint.valueOf("FF2222"));
                vb.getChildren().add(l);
            }
            else {
                JsonObject fp = parser.parse(s).getAsJsonObject().get("flightPlan").getAsJsonObject();
                gb.getChildren().clear();
                gb.getChildren().addAll(new Label("id: " + fp.get("id").getAsString()),
                                        new Label("arrival: " + fp.get("arrivesAt").getAsString()), 
                                        new Label("departure: " + fp.get("departure").getAsString()), 
                                        new Label("destination: " + fp.get("destination").getAsString()), 
                                        new Label("distance: " + fp.get("distance").getAsString()),
                                        new Label("fuel consumed: " + fp.get("fuelConsumed").getAsString()),
                                        new Label("fuel remaining: " + fp.get("fuelRemaining").getAsString()),
                                        new Label("ship Id: " + fp.get("shipId").getAsString()),
                                        new Label("time remaining: " + fp.get("timeRemainingInSeconds").getAsString() + " seconds")
                                        );
                gb.setPadding(new Insets(10, 10, 10, 10));
                gb.setVisible(true);
            }
        });

        vb.getChildren().addAll(new Label("Select a flight plan to view"), cb, gb, conf);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }

    void createFlightPlanPopup() {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Locations"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();

        ComboBox<String> cb = new ComboBox<>();
        ComboBox<String> cb2 = new ComboBox<>();
        JsonArray locations = parser.parse(server.getNearLocations(authTok)).getAsJsonObject().get("locations").getAsJsonArray();
        for (JsonElement el : locations) {
            
            cb.getItems().add(el.getAsJsonObject().get("name").getAsString());
        }
        JsonArray ships = parser.parse(server.getMyShips(authTok)).getAsJsonObject().get("ships").getAsJsonArray();
        for (JsonElement el : ships) {
            
            cb2.getItems().add(el.getAsJsonObject().get("id").getAsString());
        }
        gb.add(new Label("Destination"), 0, 0);
        gb.add(new Label("Ship"), 1, 0);
        gb.add(cb, 0, 1);
        gb.add(cb2, 1, 1);

        Button conf = new Button("confirm");
        conf.setOnAction(event -> {
            String destination = null;
            for (JsonElement el : locations) {
                if (cb.getValue().equals(el.getAsJsonObject().get("name").getAsString()))
                {
                    destination = el.getAsJsonObject().get("symbol").getAsString();
                    break;
                }
            }
            String s = server.setFlightRoute(authTok, destination, cb2.getValue());
            if (parser.parse(s).getAsJsonObject().has("error")) {
                Label l = new Label(parser.parse(s).getAsJsonObject().get("error").getAsJsonObject().get("message").getAsString());
                l.setTextFill(Paint.valueOf("FF2222"));
                vb.getChildren().add(l);
            }
            else pop.hide();
        });

        vb.getChildren().addAll(gb, conf);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }
    void viewNearLocs() {
        Stage pop = new Stage();        
        
        VBox vb = new VBox(new Label("Locations"));
        vb.setSpacing(10);
        GridPane gb = new GridPane();
        int index = 2;
        gb.add(new Label("name"), 0, 0);
        gb.add(new Label("symbol"), 1, 0);
        gb.add(new Label("type"), 2, 0);
        gb.add(new Label("Coordinates"), 3, 0);
        gb.setHgap(10);
        gb.setVgap(10);
        gb.add(new Label("----------------"), 0, 1);
        gb.add(new Label("----------------"), 1, 1);
        gb.add(new Label("----------------"), 2, 1);
        gb.add(new Label("----------------"), 3, 1);
        JsonArray locations = parser.parse(server.getNearLocations(authTok)).getAsJsonObject().get("locations").getAsJsonArray();
        for (JsonElement el : locations) {
            
            gb.add(new Label(el.getAsJsonObject().get("name").getAsString()), 0, index);
            gb.add(new Label(el.getAsJsonObject().get("symbol").getAsString()), 1, index);
            gb.add(new Label(el.getAsJsonObject().get("type").getAsString()), 3, index);
            gb.add(new Label(el.getAsJsonObject().get("x").getAsString() + ", " + el.getAsJsonObject().get("y").getAsString()), 4, index);
            index++;
        }
        vb.getChildren().addAll(gb);
        Scene scene = new Scene(vb, 600, 400);
        pop.setScene(scene);
        pop.show();
    }
    public void createAccPopup() {
        Button but = new Button("create account");
        TextField name = new TextField();
        TextField res = new TextField();
        res.setEditable(false);
        VBox vb = new VBox();
        Button cpy = new Button("Copy Token to Clipboard");
        cpy.setVisible(false);
        but.setOnAction(event -> {
            String str = server.createAccount(name.getText().trim());
            res.setText(str);
            cpy.setVisible(true);
            cpy.setOnAction(e -> {
                ClipboardContent content = new ClipboardContent();
                content.putString(str);
                Clipboard.getSystemClipboard().setContent(content);
            });
            
        });
        
        vb.getChildren().addAll(new Label("Make Account"), res, 
        new HBox(new Label("username"), name), 
        cpy, but);
        vb.setSpacing(10);
        Stage pop = new Stage();
        Scene scene = new Scene(vb, 350, 150);
        pop.setScene(scene);
        pop.setOnHiding( event -> { createAccOpen = false; } );
        pop.show();
    }
    void refreshShipInfo(JsonArray ships) {
        shipInfo.getChildren().clear();
        int index = 2;
        shipInfo.add(new Label("class"), 0, 0);
        shipInfo.add(new Label("manufacturer"), 1, 0);
        shipInfo.add(new Label("maximum cargo"), 2, 0);
        shipInfo.add(new Label("plating"), 3, 0);
        shipInfo.add(new Label("speed"), 4, 0);
        shipInfo.add(new Label("type"), 5, 0);
        shipInfo.add(new Label("weapons"), 6, 0);
        shipInfo.add(new Label("location"), 7, 0);
        shipInfo.add(new Label("coordinates"), 8, 0);
        shipInfo.add(new Label("space available"), 9, 0);
        shipInfo.add(new Label("loading speed"), 10, 0);
        shipInfo.add(new Label("id"), 11, 0);
        shipInfo.setHgap(10);
        shipInfo.setVgap(10);
        shipInfo.add(new Label("----------------"), 0, 1);
        shipInfo.add(new Label("----------------"), 1, 1);
        shipInfo.add(new Label("----------------"), 2, 1);
        shipInfo.add(new Label("----------------"), 3, 1);
        shipInfo.add(new Label("----------------"), 4, 1);
        shipInfo.add(new Label("----------------"), 5, 1);
        shipInfo.add(new Label("----------------"), 6, 1);
        shipInfo.add(new Label("----------------"), 7, 1);
        shipInfo.add(new Label("----------------"), 8, 1);
        shipInfo.add(new Label("----------------"), 9, 1);
        shipInfo.add(new Label("----------------"), 10, 1);
        for (JsonElement el : ships) {
            shipInfo.add(new Label(el.getAsJsonObject().get("class").getAsString()), 0, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("manufacturer").getAsString()), 1, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("maxCargo").getAsString()), 2, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("plating").getAsString()), 3, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("speed").getAsString()), 4, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("type").getAsString()), 5, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("weapons").getAsString()), 6, index);
            if (el.getAsJsonObject().has("location")) {
                shipInfo.add(new Label(el.getAsJsonObject().get("location").getAsString()), 7, index);
                shipInfo.add(new Label(el.getAsJsonObject().get("x").getAsString() + ", " + el.getAsJsonObject().get("y").getAsString()), 8, index);
            }
            else {
                shipInfo.add(new Label("mid-flight"), 7, index);
                shipInfo.add(new Label("Data Unavailable"), 8, index);
            }
            shipInfo.add(new Label(el.getAsJsonObject().get("spaceAvailable").getAsString()), 9, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("loadingSpeed").getAsString()), 10, index);
            shipInfo.add(new Label(el.getAsJsonObject().get("id").getAsString()), 11, index);

            Button but = new Button("View cargo");
            but.setOnAction(e -> {
                ShipCargoPopup(authTok, el.getAsJsonObject());
            });
            shipInfo.add(but, 12, index);
            Button but2 = new Button("View market");
            but2.setOnAction(e -> {
                viewMarket(authTok, el.getAsJsonObject());
            });
            shipInfo.add(but2, 13, index);
            index++;
        }
    }
   
}
